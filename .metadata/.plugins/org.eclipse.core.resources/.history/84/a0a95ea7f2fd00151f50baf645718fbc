/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== main.c ========
 */

// Usual includes
#include "msp.h"
#include <driverlib.h>
#include "grlib.h"
#include "Crystalfontz128x128_ST7735.h"
#include <stdio.h>
#include "functions.h"
#include "macros.h"

/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/std.h>
#include <xdc/runtime/System.h>
#include <xdc/cfg/global.h>

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>

/* TI-RTOS Header files */
#include <ti/drivers/GPIO.h>
// #include <ti/drivers/I2C.h>
// #include <ti/drivers/SDSPI.h>
// #include <ti/drivers/SPI.h>
// #include <ti/drivers/UART.h>
// #include <ti/drivers/Watchdog.h>
// #include <ti/drivers/WiFi.h>

/* Board Header file */
#include "Board.h"
#include "functions.h"
#include "macros.h"

Graphics_Context g_sContext;

// Mailbox message object for accelerometer data
/*typedef struct MsgADC {
	uint16_t xValue;
	uint16_t yValue;
	uint16_t zValue;
} MsgADC, *Msg;*/

// Mailbox message object for sensor data
/*typedef struct MsgSensor {
	uint16_t sensorHundreds;
	uint16_t sensorTens;
	uint16_t sensorOnes;
} MsgSensor, *MsgS;*/

int main(void){
	//Task_Params taskParams;

	/* Call board init functions */
	Board_initGeneral();
	Board_initGPIO();
	init_All();
	// Board_initI2C();
	// Board_initSDSPI();
	// Board_initSPI();
	 Board_initUART();
	// Board_initWatchdog();
	// Board_initWiFi();

	/* Start BIOS */
	BIOS_start();

	return (0);
}

void Idle_fcxn(void){
	while(1);
}

void Mailbox_Task(void){
	MsgADC msg;
	while(1){
		// Wait for ADC message to be sent
		//Mailbox_pend(adc_mailbox, &msg, BIOS_WAIT_FOREVER);
	}
}

void ADC_HWI(void){
	uint64_t status;
	//MsgADC msg;
	status = MAP_ADC14_getEnabledInterruptStatus();
	MAP_ADC14_clearInterruptFlag(status);
	uint16_t xValue;
	uint16_t yValue;
	uint16_t zValue;

	/* ADC_MEM2 conversion completed */
	if(status & ADC_INT2){
		/* Store ADC14 conversion results */
		// Take running average of ADC14 values so they can be updated
		xValue = ADC14_getResult(ADC_MEM0);
		yValue = ADC14_getResult(ADC_MEM1);
		zValue = ADC14_getResult(ADC_MEM2);
		Mailbox_post(adc_mailbox,&xValue,0);
		Mailbox_post(adc_mailbox,&yValue,0);
		Mailbox_post(adc_mailbox,&zValue,0);
		//drawAccelData(msg.xValue,msg.yValue,msg.zValue);
		//Swi_post(adc_swi);
		//adjustOrientation();
	}
}

void EUSCIA2_HWI(void){
	int dataCounter;
	char dataSetASCII;
	char dataSetHundreds;
	char dataSetTens;
	char dataSetOnes;
	int receiveData;
	int timerCounter;

	uint32_t status = MAP_UART_getEnabledInterruptStatus(EUSCI_A2_BASE);

	MAP_UART_clearInterruptFlag(EUSCI_A2_BASE, status);

	if(status & EUSCI_A_UART_RECEIVE_INTERRUPT){
		if(!timerCounter){
			init_Timer32();
			timerCounter =1;
		}
		receiveData = UCA2RXBUF;				//the value from the receive buffer will be placed into a receiveData variable
		dataSetASCII = (char)receiveData;	//we cast this value as a char* and place into dataSetASCII

		if(dataSetASCII == 0xA || dataSetASCII == 0xD){			//if a new line character is found,
			dataCounter = 3;					//send it to counter 3 location to print the number to the screen
		}else if (dataCounter == 0){
			dataSetOnes = dataSetASCII;		//we save the value into the ones place
			dataCounter++;
		}else if (dataCounter == 1){
			dataSetTens = dataSetOnes;		//we have a tens digit, so we move the first number into the tens place
			dataSetOnes = dataSetASCII;
			dataCounter++;
		}else if (dataCounter == 2){
			dataSetHundreds = dataSetTens;	//we have a hundreds digit, so we move the second number into the hundreds place
			dataSetTens = dataSetOnes;
			dataSetOnes = dataSetASCII;
			dataCounter++;
		}else if (dataCounter == 3){
			dataCounter = 0;					//clear dataCounter
			drawSensorData(dataSetHundreds,dataSetTens,dataSetOnes);						//write data to the display
			dataSetOnes = '0';				//clear out all of our old values
			dataSetTens = ' ';
			dataSetHundreds = ' ';
		}
	}
}

void Timer32_HWI(void){
	uint64_t status = Timer32_getInterruptStatus(TIMER32_0_BASE);
	Timer32_clearInterruptFlag(TIMER32_0_BASE);
	if(status){
		uint16_t xValue;
		uint16_t yValue;
		uint16_t zValue;
		Mailbox_pend(adc_mailbox, &xValue, BIOS_WAIT_FOREVER);
		Mailbox_pend(adc_mailbox, &yValue, BIOS_WAIT_FOREVER);
		Mailbox_pend(adc_mailbox, &zValue, BIOS_WAIT_FOREVER);
		//GPIO_toggleOutputOnPin(GPIO_PORT_P5,GPIO_PIN6);
		drawAccelData(xValue, yValue, zValue);
	}
}


void init_Timer32(void){
	// Periodic timer using 16 bit values
	Timer32_initModule(TIMER32_0_BASE,TIMER32_PRESCALER_16,TIMER32_32BIT,TIMER32_PERIODIC_MODE);

	Timer32_setCount(TIMER32_0_BASE,ONE_SECOND); // set to 1s to update LCD

	// Configure Timer32 interrupt
	Timer32_enableInterrupt(TIMER32_0_BASE);
	Timer32_registerInterrupt(TIMER32_0_INTERRUPT,Timer32_HWI);

	// Must be called after setting timer count
	// Use Timer32_setCountInBackground to update timer values while timer is counting
	Timer32_startTimer(TIMER32_0_BASE,FALSE);
}

void drawAccelData(uint16_t xData, uint16_t yData, uint16_t zData){
	char string[8];
	sprintf(string, "X: %5d", xData);
	Graphics_drawString(&g_sContext, (int8_t *)string,8,20,30,OPAQUE_TEXT);

	sprintf(string, "Y: %5d", yData);
	Graphics_drawString(&g_sContext,(int8_t *)string,8,20,50,OPAQUE_TEXT);

	sprintf(string, "Z: %5d", zData);
	Graphics_drawString(&g_sContext,(int8_t *)string, 8,20,70,OPAQUE_TEXT);
	//ADC_SWI();
	//adjustOrientation();
}

void drawSensorData(char dataSetHundreds, char dataSetTens, char dataSetOnes){
	char string[3];
	char data[3];

	dataSetHundreds = '0';
	dataSetTens = '0';
	dataSetOnes = '0';
	data[0] = dataSetHundreds;
	data[1] = dataSetTens;
	data[2] = dataSetOnes;
	sprintf(string, "%s", data); //print all 3 data set values
	Graphics_drawString(&g_sContext,(int8_t *)string, 8,20,100, OPAQUE_TEXT);
}


/*
 * Clear display and redraw title + accelerometer data
 */
void drawTitle(void){
	Graphics_clearDisplay(&g_sContext);
	Graphics_drawString(&g_sContext,"Accelerometer:",AUTO_STRING_LENGTH,20, 10, OPAQUE_TEXT);
	Graphics_drawStringCentered(&g_sContext,"Sensor:", AUTO_STRING_LENGTH,64,90,OPAQUE_TEXT);
}

