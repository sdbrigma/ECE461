/*
 * init.c
 *
 *  Created on: Apr 10, 2016
 *      Author: Steffon Brigman
 */

void Init_all(){
	/* Halting WDT and disabling master interrupts */
	MAP_WDT_A_holdTimer();
	MAP_Interrupt_disableMaster();

	/* Initializes Clock System */
	MAP_CS_setDCOCenteredFrequency(CS_DCO_FREQUENCY_48);
	MAP_CS_initClockSignal(CS_MCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
	MAP_CS_initClockSignal(CS_HSMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
	MAP_CS_initClockSignal(CS_SMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
	MAP_CS_initClockSignal(CS_ACLK, CS_REFOCLK_SELECT, CS_CLOCK_DIVIDER_1);

	/* Initializes display */
	Crystalfontz128x128_Init();

	/* Set default screen orientation */
	Crystalfontz128x128_SetOrientation(LCD_ORIENTATION_UP);

	/* Initializes graphics context */
	Graphics_initContext(&g_sContext, &g_sCrystalfontz128x128);
	Graphics_setForegroundColor(&g_sContext, GRAPHICS_COLOR_RED);
	Graphics_setBackgroundColor(&g_sContext, GRAPHICS_COLOR_WHITE);
	GrContextFontSet(&g_sContext, &g_sFontFixed6x8);
	//drawTitle();

	// Initialize Timer32 module
	// Periodic timer using 16 bit values
	Timer32_initModule(TIMER32_0_BASE,TIMER32_PRESCALER_16,TIMER32_32BIT,TIMER32_PERIODIC_MODE);

	Timer32_setCount(TIMER32_0_BASE,ONE_SECOND); // set to 1s to update LCD

	// Configure Timer32 interrupt
	Timer32_enableInterrupt(TIMER32_0_BASE);
	Timer32_registerInterrupt(TIMER32_0_INTERRUPT,Timer32_HWI);

	// Must be called after setting timer count
	// Use Timer32_setCountInBackground to update timer values while timer is counting
	Timer32_startTimer(TIMER32_0_BASE,FALSE);

	// Test code for timer32
	GPIO_setAsOutputPin(GPIO_PORT_P5,GPIO_PIN6); // P5.6 is blue LED on booster pack
	GPIO_setOutputLowOnPin(GPIO_PORT_P5,GPIO_PIN6);
}


